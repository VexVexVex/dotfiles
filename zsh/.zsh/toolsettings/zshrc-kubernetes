# Shell
export KUBECONFIG=~/.kube/config

# Functions
kdebug() {
  kubectl run debug --generator=run-pod/v1 --rm -i --tty --image m1dn/debug:ubuntu1604
}

ka() {
  kubectl $@ --all-namespaces
}

node_ids() {
  kubectl get no -o jsonpath='{range .items[*]}{@.metadata.name}{" "}{@.spec.externalID}{"\n"}'
}

kset_aws() {
  context=$(kubectl config current-context)
  if [ $context = "aws-dev" ]; then
    p=textnow-dev-Administrator
    export AWS_PROFILE=$p
  elif [ $context = "aws-stage" ]; then
    p=textnow-stage-Administrator
    export AWS_PROFILE=$p
  elif [ $context = "aws-qa" ]; then
    p=textnow-qa-Administrator
    export AWS_PROFILE=$p
  else
    p=textnow-prod-Administrator
    export AWS_PROFILE=$p
  fi
}

set_kube_context() {
  kubectx $1
  kset_aws
}

current_aws_profile() {
 echo "(%{%F{blue}%}%{%f%}%{%F{cyan}%}${AWS_PROFILE}%{%f%})"
}

# Usage: kdiff; kdiff -f service.yaml.erb
kdiff() {
  context=$(kubectl config current-context)
  namespace=$(kubectl config view --minify --output 'jsonpath={..namespace}')

  if [[ "${namespace}" =~ (prod|stage|qa|dev).* ]]; then
    env=$(echo $namespace | tr "-" " " | awk '{print $1}')
  elif [[ "aws-dev aws-stage aws-qa aws-prod" =~ "${context}" ]]; then
      env=$(echo $context | tr "-" " " | awk '{print $2}')
  fi

  if [ ! -z "$env" ];then
    echo "Running: krane diff $namespace $context --bindings=\"@${env}.json\" $@"
    krane diff $namespace $context --bindings="@${env}.json" $@
  else
    echo "Running: krane diff $namespace $context $@"
    krane diff $namespace $context $@
  fi
}

# Usage: kdeploy; kdeploy --bindings=myextrakey=myextravalue
kdeploy() {
  context=$(kubectl config current-context)
  namespace=$(kubectl config view --minify --output 'jsonpath={..namespace}')
  
  if [[ "${namespace}" =~ (prod|stage|qa|dev).* ]]; then
    env=$(echo $namespace | tr "-" " " | awk '{print $1}')
  elif [[ "aws-dev aws-qa aws-stage aws-prod" =~ "${context}" ]]; then
      env=$(echo $context | tr "-" " " | awk '{print $2}')
  fi

  if [ ! -z "$env" ];then
    echo "Running: kubernetes-deploy $namespace $context --bindings=\"@${env}.json\" $@"
    kubernetes-deploy $namespace $context --bindings="@${env}.json" $@
  else
    echo "Running: kubernetes-deploy $namespace $context $@"
    kubernetes-deploy $namespace $context $@
  fi
}

# Usage: krr --deployments=logstash-kafka-topic-splitter
krr() {
  context=$(kubectl config current-context)
  namespace=$(kubectl config view --minify --output 'jsonpath={..namespace}')
  echo "Running: kubernetes-restart $namespace $context $@"
  kubernetes-restart $namespace $context $@
}

# Usage: krender; krender --bindings=myextrakey=myextravalue
krender() {
  context=$(kubectl config current-context)
  namespace=$(kubectl config view --minify --output 'jsonpath={..namespace}')
  
  if [[ "${namespace}" =~ (prod|stage|qa|dev).* ]]; then
    env=$(echo $namespace | tr "-" " " | awk '{print $1}')
  elif [[ "aws-dev aws-qa aws-stage aws-prod" =~ "${context}" ]]; then
      env=$(echo $context | tr "-" " " | awk '{print $2}')
  fi

  if [ ! -z "$env" ];then
    echo "Running: kubernetes-render --bindings=\"@${env}.json\" $@"
    kubernetes-render --bindings="@${env}.json" $@
  else
    echo "Running: kubernetes-render $@"
    kubernetes-render $@
  fi
}

kgp() {
  kubectl get pods
}

kwatch() {
  kubectl get pods --watch
}

ktop() {
  watch kubectl top pods
}

klogs() {
  namespace=$(kubectl config view --minify --output 'jsonpath={..namespace}')

  stern -n $namespace $@
}

# Aliases
alias kx=set_kube_context
alias kns=kubens
alias kd=kubernetes-deploy
alias k=kubectl

alias kstats='kubectl get nodes --no-headers | awk '\''{print $1}'\'' | xargs -I {} sh -c '\''echo {} ; kubectl describe node {} | grep Allocated -A 5 | grep -ve Event -ve Allocated -ve percent -ve -- ; echo '\'''
